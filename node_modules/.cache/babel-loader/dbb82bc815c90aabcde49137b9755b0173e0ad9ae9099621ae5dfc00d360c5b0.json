{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit';\nimport { uiActions } from './ui-slice';\nconst initialCartState = {\n  items: [],\n  totalQuantity: 0\n};\nconst cartSlice = createSlice({\n  name: 'cart',\n  initialState: initialCartState,\n  reducers: {\n    AddItem(state, action) {\n      const itemToAdd = action.payload;\n      state.totalQuantity++;\n      const existingItem = state.items.find(item => item.id == itemToAdd.id);\n      if (!existingItem) {\n        state.items.push({\n          id: itemToAdd.id,\n          price: itemToAdd.price,\n          totalPrice: itemToAdd.price,\n          quantity: 1,\n          title: itemToAdd.title\n        });\n      } else {\n        existingItem.quantity++;\n        existingItem.totalPrice = existingItem.totalPrice + itemToAdd.price;\n      }\n    },\n    removeItem(state, action) {\n      const id = action.payload;\n      state.totalQuantity--;\n      const existingItem = state.items.find(item => item.id == id);\n      if (existingItem.quantity === 1) {\n        state.items = state.items.filter(item => item.id !== id);\n      } else {\n        existingItem.quantity--;\n        existingItem.totalPrice = existingItem.totalPrice - existingItem.price;\n      }\n    },\n    purchase() {}\n  }\n});\nexport const sendCartData = cart => {\n  return async dispatch => {\n    dispatch(uiActions.showNotification({\n      status: 'pending',\n      title: 'Sending...',\n      message: 'Sending cart data!'\n    }));\n    const sendRequest = async () => {\n      const response = await fetch('https://react-test-2d9ac-default-rtdb.firebaseio.com/cart.json', {\n        method: 'PUT',\n        body: JSON.stringify(cart)\n      });\n      if (!response.ok) {\n        throw new Error('Sending cart data failed');\n      }\n    };\n    try {\n      await sendRequest();\n      dispatch(uiActions.showNotification({\n        status: 'success',\n        title: 'Success!',\n        message: 'Sent cart data successfully!'\n      }));\n    } catch (error) {\n      dispatch(uiActions.showNotification({\n        status: 'error',\n        title: 'Error!',\n        message: 'Sending cart data failed!'\n      }));\n    }\n  };\n};\nexport const cartActions = cartSlice.actions;\nexport default cartSlice;","map":{"version":3,"names":["createSlice","uiActions","initialCartState","items","totalQuantity","cartSlice","name","initialState","reducers","AddItem","state","action","itemToAdd","payload","existingItem","find","item","id","push","price","totalPrice","quantity","title","removeItem","filter","purchase","sendCartData","cart","dispatch","showNotification","status","message","sendRequest","response","fetch","method","body","JSON","stringify","ok","Error","error","cartActions","actions"],"sources":["C:/Users/samtu/react-course/react-redux-advanced/src/store/cart-slice.js"],"sourcesContent":["import { createSlice } from '@reduxjs/toolkit';\r\nimport { uiActions } from './ui-slice';\r\n\r\nconst initialCartState = {\r\n    items: [],\r\n    totalQuantity: 0,\r\n};\r\n\r\nconst cartSlice = createSlice({\r\n    name: 'cart',\r\n    initialState: initialCartState,\r\n    reducers: {\r\n        AddItem(state, action) {\r\n            const itemToAdd = action.payload;\r\n            state.totalQuantity++;\r\n            const existingItem = state.items.find(item => item.id == itemToAdd.id);\r\n            if (!existingItem) {\r\n                state.items.push({\r\n                    id: itemToAdd.id,\r\n                    price: itemToAdd.price,\r\n                    totalPrice: itemToAdd.price,\r\n                    quantity: 1,\r\n                    title: itemToAdd.title\r\n                });\r\n            } else {\r\n                existingItem.quantity++;\r\n                existingItem.totalPrice = existingItem.totalPrice + itemToAdd.price;\r\n            }\r\n        },\r\n        removeItem(state, action) {\r\n            const id = action.payload;\r\n            state.totalQuantity--;\r\n            const existingItem = state.items.find(item => item.id == id);\r\n            if (existingItem.quantity === 1) {\r\n                state.items = state.items.filter(item => item.id !== id);\r\n            } else {\r\n                existingItem.quantity--;\r\n                existingItem.totalPrice = existingItem.totalPrice - existingItem.price;\r\n            }\r\n\r\n        },\r\n        purchase() { }\r\n    }\r\n});\r\n\r\nexport const sendCartData = (cart) => {\r\n    return async (dispatch) => {\r\n        dispatch(\r\n            uiActions.showNotification({\r\n                status: 'pending',\r\n                title: 'Sending...',\r\n                message: 'Sending cart data!',\r\n\r\n            })\r\n        );\r\n\r\n        const sendRequest = async () => {\r\n            const response = await fetch(\r\n                'https://react-test-2d9ac-default-rtdb.firebaseio.com/cart.json', {\r\n                method: 'PUT',\r\n                body: JSON.stringify(cart),\r\n            }\r\n            );\r\n\r\n            if (!response.ok) {\r\n                throw new Error('Sending cart data failed');\r\n            }\r\n        }\r\n\r\n\r\n        try {\r\n            await sendRequest();\r\n            dispatch(\r\n                uiActions.showNotification({\r\n                    status: 'success',\r\n                    title: 'Success!',\r\n                    message: 'Sent cart data successfully!',\r\n\r\n                })\r\n            );\r\n        } catch (error) {\r\n            dispatch(\r\n                uiActions.showNotification({\r\n                    status: 'error',\r\n                    title: 'Error!',\r\n                    message: 'Sending cart data failed!',\r\n                })\r\n            );\r\n        }\r\n    }\r\n};\r\n\r\nexport const cartActions = cartSlice.actions;\r\nexport default cartSlice;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}